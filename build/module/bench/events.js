import { add, complete, cycle, save, suite } from 'benny';
import mem from 'mem';
import { PostgresPersistenceEngine } from 'nact-persistence-postgres';
import { SQLitePersistenceEngine } from '../src';
import { destroy, makeEvent } from './utils';
const seedEngineWithEvents = async (engine, count, key) => {
    for (let i = 1; i <= count; i++) {
        await engine.persist(makeEvent(i, key));
    }
};
const sqlEvents = (dbFilename = 'bench-events-async.sqlite') => async () => {
    destroy(dbFilename);
    const engine = new SQLitePersistenceEngine(dbFilename, {
        createIfNotExists: true,
    });
    await seedEngineWithEvents(engine, 100, 'test1');
    return async () => engine.events('test1');
};
const sqlEventsSync = (dbFilename = 'bench-events-sync.sqlite') => async () => {
    destroy(dbFilename);
    const engine = new SQLitePersistenceEngine(dbFilename, {
        createIfNotExists: true,
    });
    await seedEngineWithEvents(engine, 100, 'test1');
    return () => engine.eventsSync('test1');
};
const pgEvents = (connectionString = 'postgresql://postgres:secret@localhost:5432/bench-test') => async () => {
    const engine = new PostgresPersistenceEngine(connectionString);
    await engine.db.then((db) => db.none('TRUNCATE TABLE event_journal RESTART IDENTITY;'));
    seedEngineWithEvents(engine, 100, 'test1');
    return async () => engine.events('test1');
};
export const eventsSuite = () => suite('PersistenceEngine.events()', add('SQLitePersistenceEngine.events()', mem(sqlEvents())), add('SQLitePersistenceEngine.eventsSync()', mem(sqlEventsSync())), 
// add('SQLitePersistenceEngine.eventsSync(":memory:")', mem(sqlEventsSync(':memory:'))),
add('PostgresPersistenceEngine.events()', mem(pgEvents())), cycle(), complete(), save({ file: 'events', version: '1.0.0' }), save({ file: 'events', format: 'chart.html' }));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vYmVuY2gvZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQzFELE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQztBQUN0QixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV0RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFakQsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFN0MsTUFBTSxvQkFBb0IsR0FBRyxLQUFLLEVBQ2hDLE1BQWlDLEVBQ2pDLEtBQWEsRUFDYixHQUFXLEVBQ1gsRUFBRTtJQUNGLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDL0IsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUN6QztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUFHLENBQUMsVUFBVSxHQUFHLDJCQUEyQixFQUFFLEVBQUUsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUN6RSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEIsTUFBTSxNQUFNLEdBQUcsSUFBSSx1QkFBdUIsQ0FBQyxVQUFVLEVBQUU7UUFDckQsaUJBQWlCLEVBQUUsSUFBSTtLQUN4QixDQUFDLENBQUM7SUFDSCxNQUFNLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDakQsT0FBTyxLQUFLLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxhQUFhLEdBQUcsQ0FBQyxVQUFVLEdBQUcsMEJBQTBCLEVBQUUsRUFBRSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQzVFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwQixNQUFNLE1BQU0sR0FBRyxJQUFJLHVCQUF1QixDQUFDLFVBQVUsRUFBRTtRQUNyRCxpQkFBaUIsRUFBRSxJQUFJO0tBQ3hCLENBQUMsQ0FBQztJQUNILE1BQU0sb0JBQW9CLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRCxPQUFPLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUcsQ0FDZixnQkFBZ0IsR0FBRyx3REFBd0QsRUFDM0UsRUFBRSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ2QsTUFBTSxNQUFNLEdBQUcsSUFBSSx5QkFBeUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQy9ELE1BQU0sTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0RBQWdELENBQUMsQ0FBQyxDQUFDO0lBQ3hGLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0MsT0FBTyxLQUFLLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDNUMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQUcsRUFBRSxDQUM5QixLQUFLLENBQ0gsNEJBQTRCLEVBQzVCLEdBQUcsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUN6RCxHQUFHLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7QUFDakUseUZBQXlGO0FBQ3pGLEdBQUcsQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUMxRCxLQUFLLEVBQUUsRUFDUCxRQUFRLEVBQUUsRUFDVixJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUMxQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUMvQyxDQUFDIn0=